@model BookWormProject.ViewModels.Article.ArticleCreateEditViewModel
@{
    ViewData["Title"] = "Sửa truyện " + Model.Title;
    Layout = "_LayoutAdmin";
}
@{
    var genres = Model.ListGenre;
    var authors = Model.ListAuthor;
}

<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">@ViewData["Title"]</h3>
            </div>
            <div class="card-body">
                <form asp-controller="Article" asp-action="Edit" method="post" enctype="multipart/form-data">
                    <div class="form-group">
                        <label for="title">Title</label>
                        <input type="text" class="form-control" id="title" name="Title" value="@Model.Title" required>
                    </div>
                    <div class="form-group">
                        <label for="description">Description</label>
                        <textarea class="form-control" id="description" name="Description">@Model.Description</textarea>
                    </div>

                    <div class="form-group">
                        <label>Genres</label>
                        <div class="row">
                            @foreach (var genre in genres)
                            {
                                <div class="col-lg-3 col-md-6">
                                    <div class="custom-control custom-checkbox">
                                        <input type="checkbox" class="custom-control-input" id="genre_@genre.GenreId" name="Genres" onchange="validateForm()" value="@genre.GenreId" @(Model.SelectedGenres.Contains(genre)?"checked":"")>
                                        <label class="custom-control-label" for="genre_@genre.GenreId">@genre.Name</label>
                                    </div>
                                </div>
                            }
                        </div>
                        @Html.ValidationMessageFor(model => model.Genres)
                    </div>

                    <div class="form-group">
                        <label>Authors</label>
                        <div class="row">
                            @foreach (var author in authors)
                            {
                                <div class="col-lg-3 col-md-6">
                                    <div class="custom-control custom-checkbox">
                                        <input type="checkbox" class="custom-control-input" id="author_@author.AuthorId" name="Authors" onchange="validateForm()" value="@author.AuthorId" @(Model.SelectedAuthors.Contains(author) ? "checked" : "")>
                                        <label class="custom-control-label" for="author_@author.AuthorId">@author.Name</label>
                                    </div>
                                </div>
                            }
                        </div>
                        @Html.ValidationMessageFor(model => model.Authors)
                    </div>

                    <div class="form-group">
                        <label for="is-completed">Completed?</label><br>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="IsCompleted" id="is-completed-yes" value="true" @(Model.IsCompleted?"checked":"")>
                            <label class="form-check-label" for="is-completed-yes">Yes</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="IsCompleted" id="is-completed-no" value="false" @(!Model.IsCompleted ? "checked" : "")>
                            <label class="form-check-label" for="is-completed-no">No</label>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label">Avatar</label>
                        <ul class="nav nav-tabs" id="myTab" role="tablist">
                            <li class="nav-item">
                                <a class="nav-link active" id="upload-tab" data-toggle="tab" href="#upload" role="tab" aria-controls="upload" aria-selected="true">Upload</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" id="link-tab" data-toggle="tab" href="#link" role="tab" aria-controls="link" aria-selected="false">Link</a>
                            </li>
                        </ul>
                        <div class="tab-content" id="myTabContent">
                            <div class="tab-pane fade show active" id="upload" role="tabpanel" aria-labelledby="upload-tab">
                                <!-- Form upload file -->
                                <div class="custom-file">
                                    <input asp-for="AvatarFile" type="file" class="custom-file-input" accept="image/*" onchange="previewImage(this);">
                                    <label class="custom-file-label" for="customFile">Choose file</label>
                                </div>
                            </div>
                            <div class="tab-pane fade" id="link" role="tabpanel" aria-labelledby="link-tab">
                                <input asp-for="AvatarLink" class="form-control" placeholder="Dán link ảnh vào đây" oninput="previewLink(this);" value="@Model.AvatarLink" />
                            </div>
                        </div>
                        <img id="preview-img" class="img-fluid" src="#" alt="Preview image" style="display: none">
                    </div>
                    <input type="hidden" asp-for="ArticleId" value="@Model.ArticleId" />
                    <button type="submit" id="submit-btn" class="btn btn-primary">Edit</button>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    previewLink(document.getElementById('AvatarLink'));

    function validateForm() {
        var authors = document.getElementsByName("Authors");
        var genres = document.getElementsByName("Genres");
        var isAuthorsChecked = false;
        var isGenresChecked = false;

        for (var i = 0; i < authors.length; i++) {
            if (authors[i].checked) {
                isAuthorsChecked = true;
                break;
            }
        }

        for (var i = 0; i < genres.length; i++) {
            if (genres[i].checked) {
                isGenresChecked = true;
                break;
            }
        }

        if (!isAuthorsChecked || !isGenresChecked) {
            document.getElementById("submit-btn").disabled = true;
        } else {
            document.getElementById("submit-btn").disabled = false;
        }
    }

    // Add event listener for file input
    let fileInput = document.querySelector('#AvatarFile');
    fileInput.addEventListener('change', function () {
        // Get the name of the file
        let fileName = this.value.split('\\').pop();

        // Display the file name
        let fileNameLabel = document.querySelector('.custom-file-label');
        fileNameLabel.textContent = fileName;
    });

    function previewImage(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                $('#preview-img').attr('src', e.target.result);
                $('#preview-img').show();
            }
            reader.readAsDataURL(input.files[0]);
        }
    }

    function previewLink(input) {
        var previewImg = document.getElementById("preview-img");
        previewImg.src = input.value;
        previewImg.style.display = "block";
    }

</script>

<style>
    img#preview-img {
        max-width: 200px;
        max-height: 200px;
    }

</style>